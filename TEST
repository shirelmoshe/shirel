//html_1.txt-property sets how flex items are placed in the flex container defining the main axis and the direction

////html_2.HTML-//The Flexible Box Module, usually referred to as flexbox, was designed as a
one-dimensional layout model, and as a method that could offer space
distribution between items in an interface and powerful alignment capabilities.
<html>
  <head>
    <style>
      div {
        background-color: lightgrey;
        width: 150px;
        border: 15px solid rgb(203, 158, 250);
        padding: 40px;
        margin: 30px;
      }
    </style>
  </head>
  <body>
    <div>
      <p>div</p>
    </div>
  </body>
</html>

HTML_3.HTML-<html>
  <head>
    <style>
      .div1 {
        background-color: aqua;
        width: 90%;
      }
      .div2 {
        display: flex;
      }
      .div3 {
        background-color: plum;
        width: 30%;
      }
      .div4 {
        background-color: red;
        width: 30%;
      }
      .div5 {
        background-color: blueviolet;
        width: 30%;
      }
      .div6 {
        background-color: palevioletred;
        width: 90%;
      }
    </style>
  </head>
  <body>
    <div class="div1">header</div>
    <div class="div2">
      <div class="div3">nav</div>
      <div class="div4">article</div>
      <div class="div5">aside</div>
    </div>
    <div class="div6">footer</div>
  </body>
</html>


HTML_4.HTML-<html>
  <head>
    <style>
      .button {
        background-color: pink;
        color: white;
        width: 60px;
        height: 60px;
        margin-top: 200px;
        margin-left: 200px;
      }
      .button:hover {
        background-color: plum;
      }
    </style>
  </head>
  <body>
    <button class="button">button</button>
  </body>
</html>

HTML_5.HTML-<html>
  <head>
    <style>
      table {
        border: 3px;
        border-color: black;
        width: 100%;
        margin: auto;
      }
      tr {
        display: 30px;
        background-color: bisque;
      }
    </style>
    <table>
      <tr>
        <td>id</td>
        <td>32453492338</td>
      </tr>
      <tr>
        <td>first name</td>
        <td>shirel</td>
      </tr>
      <tr>
        <td>last name</td>
        <td>moshe</td>
      </tr>
      <tr>
        <td>email</td>
        <td>shirel3350@gmail.com</td>
      </tr>
    </table>
  </head>
  <body></body>
</html>

//HTML_7-<html>
  <head>
    <style>
      .f {
        width: 250px;
        height: 250px;
      }
      .g {
        width: 250px;
        height: 250px;
      }
      .j {
        width: 250px;
        height: 250px;
      }
      div {
        flex-direction: column;
      }
    </style>
  </head>
  <body>
    <div>
      <img class="f" src="/CSS/F.jfif" />
      <img class="g" src="/CSS/G.jfif" />
      <img class="j" src="/CSS/J.jfif" />
    </div>
  </body>
</html>


//JAVASCRIPT1-class person {
  constructor(firstName, lastName, age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
  }
}

class student extends person {
  constructor(firstName, lastName, age, grade) {
    super(firstName, lastName, age);
    this.grade = grade;
  }
  firstname() {
    return this.firstName() + " " + this.lastName;
  }
  theAge() {
    return this.age;
  }
}
student = new student("shirel", "moshe", 22, 88);

//JAVASCRIPT2-et str = " A man, a plan, a canal: Panama";

let arr = [];
let arr2 = [];
function polindrom(str) {
  let str2 = str.toLowerCase();
  let str3 = str2.split("");
  for (let i = str3.lenght; i > 0; i--) {
    if (!(str3[i] >= 33 && str3[i] <= 58)) {
      arr.push(str3[i]);
    }
  }
  arr2 = arr.reverse();
  if (arr2 === arr) {
    console.log("is a polindrom");
  } else {
    console.log("not polindrom");
  }
}

console.log(polindrom(str));
//str3[i] > 97 && str3[i] < 122



